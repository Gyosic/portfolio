name: Build on Tag

on:
  push:
    tags:
      - "*"

permissions:
  contents: write

concurrency:
  group: build-on-tag-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.artifact-name.outputs.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate .env (from secrets if provided)
        shell: bash
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        run: |
          set -e
          if [ -n "${ENV_FILE}" ]; then
            printf "%s" "${ENV_FILE}" > .env
            echo "Wrote .env from ENV_FILE secret"
          else
            printf "%s\n" \
              'SITE_TITLE=Portfolio' \
              'SITE_DESCRIPTION=Portfolio' \
              'SITE_BASEURL=http://localhost:3000' \
              'API_BASEURL=http://localhost:3000' \
              'LOGO_LIGHT=/images/logo.png' \
              'LOGO_DARK=/images/logo.png' \
              'PG_BASEURL=postgresql://localhost:5432/portfolio' \
              'AUTH_SECRET=dummy' > .env
            echo "Wrote minimal .env defaults (for build only)"
          fi

      - name: Build (bundle to dist and tarball)
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: '1'
          NODE_OPTIONS: --max_old_space_size=4096

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: portfolio-dist-${{ github.ref_name }}
          path: |
            dist/**
            portfolio.tar.xz

      - id: artifact-name
        run: echo "name=portfolio-dist-${{ github.ref_name }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    if: ${{ github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: ./artifact

      - name: Prepare SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Copy artifact to remote
        run: |
          set -e
          test -n "${DEPLOY_USER}" && test -n "${DEPLOY_HOST}" && test -n "${DEPLOY_PATH}" || {
            echo "DEPLOY_USER/DEPLOY_HOST/DEPLOY_PATH secrets are required"; exit 1; }
          scp -o StrictHostKeyChecking=no -P ${DEPLOY_PORT} ./artifact/portfolio.tar.xz ${DEPLOY_USER}@${DEPLOY_HOST}:/tmp/portfolio.tar.xz
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}

      - name: Remote deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_HOST} "\
            set -euo pipefail; \
            TS=\$(date +%Y%m%d_%H%M%S); \
            mkdir -p \"$DEPLOY_PATH\"/backups; \
            tar -xJf /tmp/portfolio.tar.xz -C \"$DEPLOY_PATH\"; \
            if [ -d \"$DEPLOY_PATH/ui\" ]; then \
              tar --no-xattrs -cJf \"$DEPLOY_PATH/backups/ui_backup_\${TS}.tar.xz\" -C \"$DEPLOY_PATH\" ui/ || true; \
              cd \"$DEPLOY_PATH/backups\" && ls -t ui_backup_*.tar.xz 2>/dev/null | tail -n +$((DEPLOY_BACKUP_RETENTION + 1)) | xargs -r rm -f; \
            fi; \
            rm -rf \"$DEPLOY_PATH/ui\"; \
            mv \"$DEPLOY_PATH/dist\" \"$DEPLOY_PATH/ui\"; \
            sudo systemctl restart \"$DEPLOY_SERVICE_NAME\"; \
            sleep 5; \
            sudo systemctl is-active --quiet \"$DEPLOY_SERVICE_NAME\" || { sudo systemctl status \"$DEPLOY_SERVICE_NAME\" --no-pager -l; exit 1; } \
          "
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          DEPLOY_SERVICE_NAME: ${{ vars.DEPLOY_SERVICE_NAME }}
          DEPLOY_BACKUP_RETENTION: ${{ vars.DEPLOY_BACKUP_RETENTION }}

      - name: Create GitHub Release and upload asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            portfolio.tar.xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

